---
import LanguagesBar from "../components/LanguagesBar.astro";
import CopyIcon from "../images/CopyIcon.astro";
import ReloadIcon from "../images/ReloadIcon.astro";
import StatusDot from "./StatusDot.astro";
import StatusText from "./StatusText.astro";

interface Props {
	namespace: string;
	title: string;
	currentBlob: string;
	lastBlob: string;
	description: string;
	href: string;
	stat: string;
}

// Extrae las propiedades del componente Astro
const { namespace, href, title, description, currentBlob, lastBlob, stat } =
	Astro.props;
---

<li class="link-card">
	<article>
		<h2 id="body">
			<div style="display: flex;"><StatusDot stat={stat} /></div>

			<span>{title}</span>
		</h2>

		<span class="stat-tag">
			<button id="statButton">
				<div id="statButtonIcon" style="display: flex;"><ReloadIcon /></div>
				<div><StatusText stat={stat} /></div>
			</button>

			<button id="copyButton" data-repo-url={href} data-blob={currentBlob}>
				<div style="display: flex;">
					<CopyIcon />
				</div>
				<div id="copyButtonText">{currentBlob.slice(0, 6)}.git</div>
			</button>
		</span>

		<div id="languages-bar-container">
			<LanguagesBar />
		</div>
	</article>
</li>
<script>
	document.addEventListener("DOMContentLoaded", () => {
		const button = document.getElementById("copyButton");
		const buttonText = document.getElementById("copyButtonText");
		const statButton = document.getElementById("statButton");
		const statButtonIcon = document.getElementById("statButtonIcon");

		if (button && buttonText) {
			button.addEventListener("click", () => {
				const textToCopy =
					button.getAttribute("data-repo-url") +
					"/tree/" +
					button.getAttribute("data-blob");

				let aux = buttonText.textContent;
				buttonText.textContent = "Copiado";
				setTimeout(() => {
					buttonText.textContent = aux;
				}, 2000);

				if (textToCopy !== null) {
					// Asegúrate de que `textToCopy` no sea null
					navigator.clipboard.writeText(textToCopy).catch((err) => {
						console.error("Error al copiar el texto: ", err);
					});
				} else {
					console.error("No se encontró texto para copiar");
				}
			});
		}


		if (statButton && statButtonIcon) {
			statButton.addEventListener("click", () => {
				// Añade la clase de rotación al ícono
				statButtonIcon.classList.add("rotate");

				// Opcional: Simula que el proceso termina después de 2 segundos, y detiene la animación
				setTimeout(() => {
					statButtonIcon.classList.remove("rotate");
				}, 2000); // 2 segundos
			});
		}
	});
</script>
<style>
	@keyframes rotate {
		0% {
			transform: rotate(0deg);
		}
		100% {
			transform: rotate(-360deg);
		}
	}

	.rotate {
		animation: rotate 1s linear infinite;
	}

	#languages-bar-container {
		position: absolute;
		bottom: 0;
		left: 0;
		width: 100%;
	}
	p {
		text-align: center;
	}
	button {
		position: relative;
		display: flex;
		justify-content: flex-start;
		flex-flow: row nowrap;
		align-items: center;
		gap: 8px;
		background-color: #17191e;
		background-image: none;
		background-size: 400%;
		background-position: 100%;
		transition: background-position 0.6s cubic-bezier(0.22, 1, 0.36, 1);
		box-shadow: inset 0 0 0 1px rgba(255, 255, 255, 0.1);
		box-shadow: inset 0 0 0 1px rgba(255, 255, 255, 0.1);
		padding: 0.5rem 1rem;
		color: white;
		cursor: pointer;
		border: none;
		font-size: 1rem;
		border-radius: 1rem;
	}
	.stat-tag {
		display: flex;
		justify-content: flex-start;
		align-items: center;
		gap: 8px;
		width: auto;
		margin: 0.5rem 0;
		margin-left: -8px;

		font-size: 1rem;
	}
	.link-card {
		position: relative;
		list-style: none;
		display: flex;
		padding: 1px;
		background-color: #23262d;
		background-image: none;
		background-size: 400%;
		border-radius: 7px;
		background-position: 100%;
		transition: background-position 0.6s cubic-bezier(0.22, 1, 0.36, 1);
		box-shadow: inset 0 0 0 1px rgba(255, 255, 255, 0.1);
		overflow: hidden;
	}
	.link-card > article {
		width: 100%;
		text-decoration: none;
		line-height: 1.4;
		padding: 1rem calc(1.5rem - 1px) 1.5rem calc(1.5rem - 1px);
		border-radius: 8px;
		color: white;
		background-color: #23262d;
		opacity: 0.8;
	}
	h2 {
		display: flex;
		align-items: center;
		gap: 8px;
		margin: 0;
		font-size: 1.25rem;
		transition: color 0.6s cubic-bezier(0.22, 1, 0.36, 1);
	}

	button:is(:hover, :active) {
		background-position: 0;
		background-image: var(--accent-gradient);
	}

	
	button:is(:hover, :active) > div {
		color: white;
	}
</style>
