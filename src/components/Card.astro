---
import LanguagesBar from "../components/LanguagesBar.astro";

interface Props {
	title: string;
	currentBlob: string;
	lastBlob: string;
	description: string;
	href: string;
	stat: string;
}

// Extrae las propiedades del componente Astro
const { href, title, description, currentBlob, lastBlob, stat } = Astro.props;

// Determina el estado del card basado en la propiedad 'stat'
const getStatusInfo = (stat: string) => {
	switch (stat) {
		case "-":
			return { bgcolor: "background-color: #fbff00;", text: "Desactualizado" };
		case "+":
			return {
				bgcolor: "background-color: #ff0000;",
				text: "Commits no registrados",
			};
		case "U":
			return {
				bgcolor: "background-color: #ff0000;",
				text: "Conflictos de Union/Merge",
			};
		case "":
			return { bgcolor: "background-color: #00ff00;", text: "Actualizado" };
		default:
			return {
				bgcolor: "background-color: #fff;",
				text: "Estado unkown",
			};
	}
};

const { bgcolor, text } = getStatusInfo(stat);
---

<li class="link-card">
	<article>
		<h2 id="body">
			<div style={bgcolor} class="dot"></div><span>{title}</span>
		</h2>

		<span class="stat-tag">
			<button>
				<div style={bgcolor} class="dot"></div>
				<div>{text}</div>
			</button>

	
			<button id="copyButton" data-repo-title={title} data-blob={currentBlob}>
				<div>&#10063;</div>
				<div>{currentBlob.slice(0,3)}</div>
			</button>
		</span>

		<div id="languages">
			<LanguagesBar />
		</div>
	</article>
</li>
<script>
	document.addEventListener("DOMContentLoaded", () => {
		const button = document.getElementById("copyButton");

		if (button) {
			button.addEventListener("click", () => {
				const textToCopy =
					"https://github.com/rricajos/" +
					button.getAttribute("data-repo-title") +
					"/tree/" +
					button.getAttribute("data-blob");

				if (textToCopy !== null) {
					// Asegúrate de que `textToCopy` no sea null
					navigator.clipboard.writeText(textToCopy).catch((err) => {
						console.error("Error al copiar el texto: ", err);
					});
				} else {
					console.error("No se encontró texto para copiar");
				}
			});
		}
	});
</script>
<style>
	.dot {
		position: relative;
		margin-top: 2px;
		width: 8px;
		height: 8px;
		border-radius: 50%;
	}
	#languages {
		position: absolute;
		bottom: 0;
		left: 0;
		width: 100%;
	}
	p {
		text-align: center;
	}
	button {
		position: relative;
		display: flex;
		justify-content: flex-start;
		flex-flow: row nowrap;
		align-items: center;
		gap: 8px;
		background-color: #17191e;
		background-image: none;
		background-size: 400%;
		background-position: 100%;
		transition: background-position 0.6s cubic-bezier(0.22, 1, 0.36, 1);
		box-shadow: inset 0 0 0 1px rgba(255, 255, 255, 0.1);
		box-shadow: inset 0 0 0 1px rgba(255, 255, 255, 0.1);
		padding: 0.5rem 1rem;
		color: white;
		cursor: pointer;
		border: none;
		font-size: 1rem;
		border-radius: 1rem;
	}
	.stat-tag {
		display: flex;
		justify-content: flex-start;
		align-items: center;
		gap: 8px;
		width: auto;
		margin: 0.5rem 0;
		margin-left: -8px;

		font-size: 1rem;
	}
	.link-card {
		position: relative;
		list-style: none;
		display: flex;
		padding: 1px;
		background-color: #23262d;
		background-image: none;
		background-size: 400%;
		border-radius: 7px;
		background-position: 100%;
		transition: background-position 0.6s cubic-bezier(0.22, 1, 0.36, 1);
		box-shadow: inset 0 0 0 1px rgba(255, 255, 255, 0.1);
		overflow: hidden;
	}
	.link-card > article {
		width: 100%;
		text-decoration: none;
		line-height: 1.4;
		padding: 1rem calc(1.5rem - 1px) 1.5rem calc(1.5rem - 1px);
		border-radius: 8px;
		color: white;
		background-color: #23262d;
		opacity: 0.8;
	}
	h2 {
		display: flex;
		align-items: center;
		gap: 8px;
		margin: 0;
		font-size: 1.25rem;
		transition: color 0.6s cubic-bezier(0.22, 1, 0.36, 1);
	}

	button:is(:hover, :focus-within) {
		background-position: 0;
		background-image: var(--accent-gradient);
	}
	button:is(:hover, :focus-within) h2 {
		color: rgb(var(--accent-light));
	}
</style>
