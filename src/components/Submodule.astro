---
// Definir la estructura para los submódulos
interface Submodule {
	title: string;
	url: string;
	href: string;
}

// Inicializar un arreglo vacío para los submódulos
let submodules: Submodule[] = [];

---

<!-- HTML de la página -->
<ul id="submodule-list"></ul>


<!-- Agregar el script de cliente -->
<script>
    const submoduleList = document.getElementById('submodule-list');

    async function fetchSubmodules() {
        const response = await fetch('https://api.github.com/repos/rricajos/DAW/contents/.gitmodules');
        const data = await response.json();

        // Decodificar el contenido del archivo .gitmodules (está en base64)
        const decodedContent = atob(data.content);

        // Analizar el contenido del archivo .gitmodules para extraer los submódulos
        const lines = decodedContent.split('\n');
        let currentSubmodule = {
					title: "",
					url: ""
				};

        const submodules = [];

        lines.forEach((line) => {
            if (line.startsWith('[submodule')) {
                // Guardar el submódulo anterior si existe
                if (currentSubmodule.title && currentSubmodule.url) {
                    submodules.push({
                        title: currentSubmodule.title,
                        url: currentSubmodule.url,
                        href: currentSubmodule.url,
                    });
                }
                // Reiniciar para un nuevo submódulo
								 currentSubmodule = {
									title: "",
									url: ""
								};
            } else if (line.trim().startsWith('path')) {
                const [, path] = line.split('=');
                currentSubmodule.title = path.trim();
            } else if (line.trim().startsWith('url')) {
                const [, url] = line.split('=');
                currentSubmodule.url = url.trim();
            }
        });

        // Añadir el último submódulo
        if (currentSubmodule.title && currentSubmodule.url) {
            submodules.push({
                title: currentSubmodule.title,
                url: currentSubmodule.url,
                href: currentSubmodule.url,
            });
        }

        return submodules;
    }

    // Llamar a la función para obtener los submódulos y renderizarlos en la página
    fetchSubmodules().then((submodules) => {
        submodules.forEach(submodule => {
					const listItem = document.createElement('li');

listItem.className = "link-card";

listItem.style.listStyle = "none";
listItem.style.display = "flex";
listItem.style.padding = "1px";
listItem.style.backgroundColor = "#23262d";
listItem.style.backgroundImage = "none";
listItem.style.backgroundSize = "400%";
listItem.style.borderRadius = "7px";
listItem.style.backgroundPosition = "100%";
listItem.style.transition = "background-position 0.6s cubic-bezier(0.22, 1, 0.36, 1)";
listItem.style.boxShadow = "inset 0 0 0 1px rgba(255, 255, 255, 0.1)";

// Estilos para el enlace dentro del <li>
const styleLink = `
  width: 100%;
  text-decoration: none;
  line-height: 1.4;
  padding: calc(1.5rem - 1px);
  border-radius: 8px;
  color: white;
  background-color: #23262d;
  opacity: 0.8;
`;

// Estilos para el <h2> dentro del enlace
const styleH2 = `
  margin: 0;
  font-size: 1.25rem;
  transition: color 0.6s cubic-bezier(0.22, 1, 0.36, 1);
`;

// Estilos para el <p> dentro del enlace
const styleP = `
  margin-top: 0.5rem;
  margin-bottom: 0;
`;

// Aplicar estilos a los elementos internos
const styleTag = document.createElement('style');
styleTag.textContent = `
  .link-card:hover,
  .link-card:focus-within {
    background-position: 0;
    background-image: var(--accent-gradient);
  }
  
  .link-card:hover h2,
  .link-card:focus-within h2 {
    color: rgb(var(--accent-light));
  }
`;
document.head.appendChild(styleTag);

listItem.innerHTML = `
    <a href="${submodule.href}" style="${styleLink}">
        <h2 style="${styleH2}">${submodule.title} <span>&rarr;</span></h2>
        <p style="${styleP}">${submodule.url}</p>
    </a>
`;

            submoduleList.appendChild(listItem);
        });
    });

		
</script>
